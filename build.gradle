// apply plugin: 'java'
apply plugin: 'idea'

// 用于检测依赖的包是否有更新
apply plugin: 'versions'    
// apply plugin: "sonar-runner"

// 引入jar包定义
// 这个文件中定义的jar包可以直接在子项目中使用，不需要再次使用 apply from 这个语句
// 
apply from: 'dependencyDefinitions.gradle'

// ======================================================================================
// 用于生成项目目录结构
// https://github.com/townsfolk/gradle-templates
// 远程速度太慢，所以下载到本地编译，位于 gradle/gradle-templates 下面
// 
// 默认的设置是
// apply from: 'file:///[gradle-templates]/installation/apply-local.groovy'
// 
// 不过这个好像需要采用绝对路径才行，相对路径不好使，搞了半天没搞定，
// 索性把这段代码直接复制过来，反正就是去配置下jar就行了
buildscript {
    repositories {
        ivy {
           String tpInstallDir = project.hasProperty('gradle.templates.dir') ? project.getProperty('gradle.templates.dir') :
                                                                         System.properties['user.dir']
            name = 'gradle_templates'
            artifactPattern "${tpInstallDir}/build/libs/[artifact]-[revision].jar"
        }

        mavenCentral()

        // mavenLocal()
    }
    dependencies {
        def templatesVersion = project.hasProperty('gradle.templates.ver') ? project.getProperty('gradle.templates.ver') :
                                                                         project.version
        classpath "gradle-templates:gradle-templates:${templatesVersion}"
        classpath 'com.github.ben-manes:gradle-versions-plugin:0.4'
    }
}
// Check to make sure templates.TemplatesPlugin isn't already added.
if (!project.plugins.findPlugin(templates.TemplatesPlugin)) {
    project.apply(plugin: templates.TemplatesPlugin)
}
// ======================================================================================

/**
 * 获取属性，如果没有则采用默认值
 */
def defaultProperty(propertyName, defaultValue) {
    return hasProperty(propertyName) ? project[propertyName] : defaultValue
}

//ext.profile = project['profile']

/**
 * 根据命令行输入的参数来判断profile，两种类别：dev（开发环境）、prod（生产环境）
 * 不提供参数表示为dev
 * 
 * 示例：gradle war -Pprofile=prod
 *
 * TODO: 已经没用了，哪天删掉
 */
def getProfile() {
    return defaultProperty('profile', 'dev')
}

// 所有子项目的通用配置
subprojects { 
    apply plugin: 'java'
    // apply plugin: 'eclipse'
    apply plugin: 'idea'

    // JVM 版本号要求
    sourceCompatibility = 1.7
    targetCompatibility = 1.7

    // java编译的时候缺省状态下会因为中文字符而失败,所以这儿需要改为utf8
    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
    
    repositories {
        // mavenCentral()别名，表示依赖是从Central Maven 2 仓库中获取。
        // jcenter()别名，表示依赖是从Bintary’s JCenter Maven 仓库中获取。
        // mavenLocal()别名，表示依赖是从本地的Maven仓库中获取。
        mavenCentral()
        maven { url 'http://download.java.net/maven/2/' }
        maven { url 'http://10.33.1.216:8081/nexus/content/groups/public/' }

        // 带认证的库
        /*
        maven{
            credentials{
                username 'admin'
                password 'admin123'
            }
            url "http://localhost:8081/nexus/content/groups/public/"
        }
        */

        // ivy {
        //     url "http://ivy.petrikainulainen.net/repo"
        // }

        // ivy {
        //     // URL can refer to a local directory
        //     url "../local-repo"
        // }

        // flatDir {
        //    dirs 'libs'
        // }

        flatDir(dirs: '$projectDir/libs')
    }

    /*
    jar {
        manifest.attributes provider: 'gradle'
    }
    */
    jar {
        manifest {
            attributes("Implementation-Title": "Gradle")
        }
    }
    
    /*
    ext {  
        springVersion = '3.2.11.RELEASE'  
        hibernateVersion='4.3.1.Final'  
    }
    */
    
    configurations {
        // compile.exclude module: 'commons'
        
        // 所有需要忽略的包定义在此
        all*.exclude group: 'commons-httpclient'
        all*.exclude group: 'commons-logging'
        all*.exclude group: 'commons-beanutils', module: 'commons-beanutils'
    }
    
    // List hibernate = ['org.hibernate:hibernate:3.0.5@jar', 'somegroup:someorg:1.0@jar']
    
    dependencies {
        /*
        compile("org.gradle.test.excludes:api:1.0") {
            exclude module: 'shared'
        }
        */
        
        // runtime hibernate
    
        // 通用依赖
        compile (
            /*
            "org.springframework:spring-context:$springVersion",
            "org.springframework:spring-orm:$springVersion",
            "org.springframework:spring-tx:$springVersion",
            "org.hibernate:hibernate-entitymanager:$hibernateVersion", 
            */
            
            libraries.'logback-core',
            libraries.'logback-classic',
            libraries.'jcl-over-slf4j',
            libraries.'log4j-over-slf4j',
            libraries.'jul-to-slf4j',
            libraries.'slf4j-api',
            libraries.'logback-ext-spring',
            libraries.'guava'
        )

        // 依赖mave中不存在的jar
        ext.jarTree = fileTree(dir: 'libs', include: '**/*.jar')
        ext.rootProjectLibs = new File(rootProject.rootDir, 'libs').getAbsolutePath()
        ext.jarTree += fileTree(dir: rootProjectLibs, include: '**/*.jar')

        // 测试依赖
        testCompile (
            libraries.'junit',
            libraries.'spring-test'
        )
    }

    // 显示当前项目下所有用于 compile 的 jar.
    task listJars(description: 'Display all compile jars.') << {
        println description
        configurations.compile.each { File file -> println file.name }
    }
}

/*
configure(subprojects.findAll {it.name.contains('war')}) {
    apply plugin: 'war'
}

project(':core') {
    ext{
        hibernateVersion = '4.2.1.Final'
    }
    dependencies {
        compile 'org.hibernate:hibernate-core:${hibernateVersion}'
    }
}

def defaultProperty(propertyName, defaultValue) {
    return hasProperty(propertyName) ? project[propertyName] : defaultValue
}

ext {
    profile = project['profile']
}
def loadProperties(){
    def props = new Properties()
    new File("${rootProject.projectDir}/config/${profile}.properties")
            .withInputStream {
        stream -> props.load(stream)
    }
    props
}

environments {
    development {
        jdbc {
            url = 'development'
            user = 'xxxx'
            password = 'xxxx'
        }
    }

    test {
        jdbc {
            url = 'test'
            user = 'xxxx'
            password = 'xxxx'
        }
    }

    production {
        jdbc {
            url = 'production'
            user = 'xxxx'
            password = 'xxxx'
        }
    }
}
*/
